class CustomKeyPressTracker {
    constructor() {
        this.currentKey = '';       // Текущая нажата клавиша
        this.currentTextKey = '';   // Текущая клавиша для текста
        this.currentKeyCode = '';    // Код текущей клавиши
        this.scrollValue = 0;       // Значение прокрутки
        this.scrollTimeout = null;  // Таймер для сбрасывания значения прокрутки

        // Храним состояние нажатых клавиш
        this.keyPressed = {}; // Объект для хранения состояния других клавиш

        this.initEventListeners();   // Инициализируем слушатели
    }

    getInfo() {
        return {
            id: 'ddanikooTools', // Уникальный идентификатор
            name: "ddanikoo's tools", // Имя расширения
            blocks: [
                {
                    opcode: 'getTextKey',
                    blockType: Scratch.BlockType.REPORTER,
                    text: 'Клавиша для текста',
                    color: '#FF5733' // Красный цвет
                },
                {
                    opcode: 'getCurrentKey',
                    blockType: Scratch.BlockType.REPORTER,
                    text: 'Текущая клавиша',
                    color: '#FF5733' // Красный цвет
                },
                {
                    opcode: 'getKeyCode',
                    blockType: Scratch.BlockType.REPORTER,
                    text: 'Код текущей клавиши',
                    color: '#FF5733' // Красный цвет
                },
                {
                    opcode: 'getScrollValue',
                    blockType: Scratch.BlockType.REPORTER,
                    text: 'Значение прокрутки мыши',
                    color: '#FF5733' // Красный цвет
                },
                {
                    opcode: 'removeLastCharacter',
                    blockType: Scratch.BlockType.REPORTER,
                    text: 'Удалить последний символ из [input]',
                    arguments: {
                        input: {
                            type: Scratch.ArgumentType.STRING,
                            defaultValue: 'Текст'
                        }
                    },
                    color: '#FF5733' // Красный цвет
                },
                {
                    opcode: 'getIPAddress',
                    blockType: Scratch.BlockType.REPORTER,
                    text: 'Получить IP адрес',
                    color: '#FF5733' // Красный цвет
                },
                {
                    opcode: 'sendMessage',
                    blockType: Scratch.BlockType.COMMAND,
                    text: 'Послать сообщение [MESSAGE]',
                    arguments: {
                        MESSAGE: {
                            type: Scratch.ArgumentType.STRING,
                            defaultValue: 'Привет, мир!'
                        }
                    },
                    color: '#FF5733' // Красный цвет
                },
                {
                    opcode: 'isKeyPressed',
                    blockType: Scratch.BlockType.BOOLEAN, // Оператор для проверки клавиши
                    text: 'Клавиша [KEY] нажата?',
                    arguments: {
                        KEY: {
                            type: Scratch.ArgumentType.STRING,
                            menu: 'keyCodes' // Используем меню для выбора кода клавиши
                        }
                    },
                    color: '#FF5733' // Красный цвет
                }
            ],
            menus: {
                keyCodes: [
                    "KeyA", "KeyB", "KeyC", "KeyD", "KeyE", "KeyF",
                    "KeyG", "KeyH", "KeyI", "KeyJ", "KeyK", "KeyL",
                    "KeyM", "KeyN", "KeyO", "KeyP", "KeyQ", "KeyR",
                    "KeyS", "KeyT", "KeyU", "KeyV", "KeyW", "KeyX",
                    "KeyY", "KeyZ",
                    "Enter", "Escape", "Backspace", "Tab", "Space",
                    "ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight",
                    "ShiftLeft", "ShiftRight", "ControlLeft", "ControlRight",
                    "AltLeft", "AltRight", "MetaLeft", "MetaRight",
                    "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8",
                    "F9", "F10", "F11", "F12"
                ] // Список кодов клавиш
            }
        };
    }

    initEventListeners() {
        // Слушатель нажатий клавиш
        window.addEventListener('keydown', (event) => {
            const key = event.key;
            const keyCode = event.code;

            this.currentKey = key;              // Сохраняем текущую клавишу
            this.currentKeyCode = keyCode;      // Сохраняем код текущей клавиши

            // Запоминаем, что клавиша нажата
            this.keyPressed[keyCode] = true;

            if (this.isValidTextKey(this.currentKey)) {
                this.currentTextKey = this.currentKey; // Сохраняем только допустимую клавишу
            } else {
                this.currentTextKey = ''; // Если символ не валиден, обнуляем
            }
        });

        // Слушатель прокрутки мыши
        window.addEventListener('wheel', (event) => {
            this.scrollValue = Math.sign(event.deltaY); // Определяем направление прокрутки
            
            // Сброс значения прокрутки по таймеру
            if (this.scrollTimeout) {
                clearTimeout(this.scrollTimeout); // Очищаем предыдущий таймер
            }
            this.scrollTimeout = setTimeout(() => {
                this.scrollValue = 0; // Сбрасываем значение прокрутки после 1 секунды
            }, 1000); // 1 секунда без прокрутки
        });

        // Сбрасываем значения при отпускании клавиши
        window.addEventListener('keyup', (event) => {
            const keyCode = event.code;
            this.keyPressed[keyCode] = false; // Устанавливаем, что клавиша отпущена
            // Очищаем текущую клавишу при отпускании
            this.currentKey = ''; 
            this.currentTextKey = ''; 
            this.currentKeyCode = ''; 
        });
    }

    isValidTextKey(key) {
        // Разрешаем любые буквы, цифры и специфические символы
        return /^[\p{L}\p{N}.,!?;:'"(){}$$\/<>\-+\s]$/u.test(key);
    }

    getTextKey() {
        // Сбрасывается, если ни одна клавиша не нажата
        if (!this.currentTextKey && !this.currentKey) {
            return ''; 
        }
        return this.currentTextKey || ''; // Возвращаем текущую клавишу для текста или пустоту
    }

    getCurrentKey() {
        return this.currentKey || ''; // Возвращаем последнюю нажатую клавишу или пустоту
    }

    getKeyCode() {
        return this.currentKeyCode || ''; // Возвращаем код текущей клавиши или пустоту
    }

    getScrollValue() {
        return this.scrollValue || 0; // Возвращаем значение прокрутки или 0
    }

    removeLastCharacter(args) {
        const input = args.input; // Получаем входную строку
        if (input.length > 0) {
            return input.slice(0, -1); // Удаляем последний символ
        }
        return ''; // Возвращаем пустую строку, если входная строка пустая
    }

    async getIPAddress() {
        try {
            const response = await fetch('https://api.ipify.org?format=json'); // Получаем IP адрес
            const data = await response.json();
            return data.ip; // Возвращаем IP адрес
        } catch (error) {
            console.error('Ошибка при получении IP адреса:', error);
            return 'Ошибка';
        }
    }

    sendMessage(args) {
        const message = args.MESSAGE; // Получаем текст сообщения
        alert(message); // Выводим сообщение на экран
        console.log(`Сообщение отправлено: ${message}`); // Логируем сообщение в консоль
    }

    isKeyPressed(args) {
        const keyToCheck = args.KEY; // Получаем ключ для проверки
        return this.keyPressed[keyToCheck] || false; // Возвращаем true, если клавиша нажата
    }
}

// Регистрируем расширение
Scratch.extensions.register(new CustomKeyPressTracker());